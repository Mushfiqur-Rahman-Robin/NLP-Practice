# -*- coding: utf-8 -*-
"""Stock Sentiment Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G7RzGm7oy59B2FOz8KEnYOgTu4hdsIuW
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df  = pd.read_csv('/content/stockdata.csv',  encoding = "ISO-8859-1")
df.head()

df = df.drop(['Date'], axis = 1)
df

X = df.iloc[:, 1:26]
X

Y = df.iloc[: , 0]
Y

X.replace("[^a-zA-Z]"," ",regex=True, inplace=True)

#renaming columns
list1= [i for i in range(25)]
new_index = [str(i) for i in list1]
X.columns= new_index
X.head()

#lowering characters, otherwise nltk will consider captial and small words as two different words

for index in new_index:
    X[index] = X[index].str.lower()
X.head()

X.index

headlines = []

for row in range(0,len(X.index)):
    headlines.append(' '.join(str(x) for x in X.iloc[row,0:25]))

print(headlines[0])

"""# **Bag of Words**"""

from sklearn.feature_extraction.text import CountVectorizer

countvector = CountVectorizer(ngram_range=(2,2))
X = countvector.fit_transform(headlines)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=42)

from sklearn.ensemble import RandomForestClassifier

randomclassifier = RandomForestClassifier(n_estimators=200, criterion='entropy', n_jobs= -1)
randomclassifier.fit(X_train, y_train)

predictions = randomclassifier.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

matrix=confusion_matrix(y_test, predictions)
matrix

score = accuracy_score(y_test, predictions)
print(score)

report = classification_report(y_test, predictions)
print(report)

"""# **TF-IDF**"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidfvectorizer = TfidfVectorizer(ngram_range=(2,2))
X = tfidfvectorizer.fit_transform(headlines)

#Y = Y.astype('int')

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size= 0.33, random_state= 0)

from sklearn.ensemble import RandomForestClassifier

randomclassi = RandomForestClassifier(n_estimators= 200, criterion='entropy', n_jobs= -1)
randomclassi.fit(X_train, y_train)

predictions = randomclassi.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

matrix=confusion_matrix(y_test, predictions)
matrix

score = accuracy_score(y_test, predictions)
print(score)

report = classification_report(y_test, predictions)
print(report)

"""# **Another Approach**

This part was copied from this notebook: https://github.com/krishnaik06/Stock-Sentiment-Analysis/blob/master/Stock%20Sentiment%20Analysis.ipynb
"""

df  = pd.read_csv('/content/stockdata.csv',  encoding = "ISO-8859-1")
df.head()

df.head()

train = df[df['Date'] < '20150101']
test = df[df['Date'] > '20141231']

# Removing punctuations
data=train.iloc[:,2:27]
data.replace("[^a-zA-Z]"," ",regex=True, inplace=True)

# Renaming column names for ease of access
list1= [i for i in range(25)]
new_Index=[str(i) for i in list1]
data.columns= new_Index
data.head(5)

# Convertng headlines to lower case
for index in new_Index:
    data[index]=data[index].str.lower()
data.head(1)

' '.join(str(x) for x in data.iloc[1,0:25])

headlines = []
for row in range(0,len(data.index)):
    headlines.append(' '.join(str(x) for x in data.iloc[row,0:25]))

headlines[0]

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier

## implement BAG OF WORDS
countvector=CountVectorizer(ngram_range=(2,2))
traindataset=countvector.fit_transform(headlines)

# implement RandomForest Classifier
randomclassifier=RandomForestClassifier(n_estimators=200,criterion='entropy')
randomclassifier.fit(traindataset,train['Label'])

## Predict for the Test Dataset
test_transform= []
for row in range(0,len(test.index)):
    test_transform.append(' '.join(str(x) for x in test.iloc[row,2:27]))
test_dataset = countvector.transform(test_transform)
predictions = randomclassifier.predict(test_dataset)

## Import library to check accuracy
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

matrix=confusion_matrix(test['Label'],predictions)
print(matrix)
score=accuracy_score(test['Label'],predictions)
print(score)
report=classification_report(test['Label'],predictions)
print(report)

"""So, the second approach gives better result."""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidfvectorizer = TfidfVectorizer(ngram_range=(2,2))
traindataset = tfidfvectorizer.fit_transform(headlines)

# implement RandomForest Classifier
randomclassif=RandomForestClassifier(n_estimators=200,criterion='entropy')
randomclassif.fit(traindataset,train['Label'])

## Predict for the Test Dataset
test_transform= []
for row in range(0,len(test.index)):
    test_transform.append(' '.join(str(x) for x in test.iloc[row,2:27]))
test_dataset = tfidfvectorizer.transform(test_transform)
predictions = randomclassif.predict(test_dataset)

## Import library to check accuracy
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

matrix=confusion_matrix(test['Label'],predictions)
print(matrix)
score=accuracy_score(test['Label'],predictions)
print(score)
report=classification_report(test['Label'],predictions)
print(report)